AWSTemplateFormatVersion: 2010-09-09

Description: 'This template creates a VPC for the web project and all its associated components. See README.md for a indepth description.'

#
# Define the parameters
#
# - DomainName
# - DomainExtension
#
Parameters:

  StackNameHostedZone:
    Description: This is the stack name of the associated hosted zone
    Type: String
    AllowedPattern: "[a-zA-Z0-9-.]+"
    Default: sharemytutoring-com-hosted-zone
    ConstraintDescription: a valid stack name for the associated hosted zone

  DomainName:
    Type: String
    Description: This is the name of the domain (without the extension).
    AllowedPattern: "[a-z0-9-]+"
    MinLength: 1
    MaxLength: 64
    Default: sharemytutoring
    ConstraintDescription: enter a valid domain name without the extension

  DomainExtension:
    Type: String
    Description: This is the domain extension (com / co.uk / info)
    AllowedPattern: "[a-z0-9.]+"
    Default: com
    ConstraintDescription: a valid domain extension

  LambdaEdgeArn:
    Type: String
    Description: This is the lambda edge version arn

  CertificateArn:
    Type: String
    Description: This is the arn of the SSL certificate for the specified website

#
# Define the resources
#
Resources:

  # Created an origin access identity to restrict access to the SÂ£ bucket to cloudfront
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket

  # Create the S3 bucket to store our website code 
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join 
      - ''
      - - !Ref DomainName
        - '.'
        - !Ref DomainExtension

  # The policy associated with the bucket. The principal ensures only cloudfront can update the bucket.
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: CloudFrontOriginAccessIdentity
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: 
          - 's3:GetObject'
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  # Creates the cloudfront distribution.
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn: CloudFrontOriginAccessIdentity
    Properties:
      DistributionConfig:
        Aliases:
        - !Join ['.', [!Ref DomainName, !Ref DomainExtension ]]
        - !Join ['.', ['www', !Ref DomainName, !Ref DomainExtension ]]
        Comment: 'Tester'
        ViewerCertificate: 
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only        
        CustomErrorResponses:
        - ErrorCode: 403 # not found
          ResponseCode: 404
          ResponsePagePath: '/404.html'
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - DELETE
          - OPTIONS
          - PATCH
          - POST
          - PUT
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          LambdaFunctionAssociations:
          - EventType: "origin-response"
            LambdaFunctionARN: !Ref LambdaEdgeArn
          MaxTTL: 86400 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        Origins:
        - DomainName: !GetAtt 'S3Bucket.DomainName'
          Id: s3origin
          S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_100'

  # Create routeset to link domain name to cloudfront distribution
  Route53Record:
    Type: 'AWS::Route53::RecordSet'
    DependsOn: 
    - CloudFrontDistribution
    Properties:
      HostedZoneId: 
        Fn::ImportValue: !Sub "${StackNameHostedZone}-id"
      Name: !Join ['.', [!Ref DomainName, !Ref DomainExtension ]]
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2      # This Zone ID is used for any CloudFront Distribution
        DNSName: !GetAtt CloudFrontDistribution.DomainName

  Route53RecordWWW:
    Type: AWS::Route53::RecordSet
    DependsOn: 
    - CloudFrontDistribution
    Properties:
      HostedZoneId: 
        Fn::ImportValue: !Sub "${StackNameHostedZone}-id"
      Name: !Join ['.', ['www', !Ref DomainName, !Ref DomainExtension ]]
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2      # This Zone ID is used for any CloudFront Distribution
        DNSName: !GetAtt CloudFrontDistribution.DomainName

Outputs:

  BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref S3Bucket

  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution

  Domain:
    Description: 'Cloudfront Domain'
    Value: !GetAtt CloudFrontDistribution.DomainName

  DomainZone:
    Description: 'The domain zone for the <domain name>.'
    Value: !Ref Route53Record

  DomainZoneWWW:
    Description: 'The domain zone for the www.<domain name>.'
    Value: !Ref Route53RecordWWW
